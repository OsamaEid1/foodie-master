{"ast":null,"code":"var _jsxFileName = \"D:\\\\web\\\\Learn_React\\\\Foodie-Master\\\\src\\\\components\\\\FormComponent.js\",\n  _s = $RefreshSig$();\nimport { useRef, useState } from \"react\";\nimport { Form, useActionData } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FormComponent = props => {\n  _s();\n  // Form Validation Result\n  const data = useActionData();\n  let fNameErr, lNameErr, adrsErr, phErr, locErr, CheckBoxesErr;\n  if (data) {\n    if (data.name) {\n      fNameErr = {\n        border: \"1px solid red\"\n      };\n      lNameErr = {\n        border: \"1px solid red\"\n      };\n    }\n    if (data.fName) {\n      fNameErr = {\n        border: \"1px solid red\"\n      };\n    }\n    if (data.lName) {\n      lNameErr = {\n        border: \"1px solid red\"\n      };\n    }\n    if (data.address) {\n      adrsErr = {\n        border: \"1px solid red\"\n      };\n    }\n    if (data.phone) {\n      phErr = {\n        border: \"1px solid red\"\n      };\n    }\n    if (data.location) {\n      locErr = {\n        border: \"1px solid red\"\n      };\n    }\n    if (data.checkBox) {\n      CheckBoxesErr = {\n        border: \"1px solid red\"\n      };\n    }\n  }\n\n  // Handle Changes\n  // Inputs\n  let [numOfSmallItems, setNumOfSmallItems] = useState(1);\n  let [numOfMediumItems, setNumOfMediumItems] = useState(0);\n  let [numOfLargeItems, setNumOfLargeItems] = useState(0);\n  // CheckBoxes\n  let [smallBoxChecked, setSmallBoxChecked] = useState(true);\n  let [mediumBoxChecked, setMediumBoxChecked] = useState(false);\n  let [largeBoxChecked, setLargeBoxChecked] = useState(false);\n  let handleInputChanges = (input, val) => {\n    if (val >= 0) {\n      if (input === \"sm\") {\n        setNumOfSmallItems(val);\n        if (smallBoxChecked === false) {\n          setSmallBoxChecked(true);\n        }\n        if (val === 0) {\n          setSmallBoxChecked(false);\n        }\n      } else if (input === \"med\") {\n        setNumOfMediumItems(val);\n        if (mediumBoxChecked === false) {\n          setMediumBoxChecked(true);\n        }\n        if (val === 0) {\n          setMediumBoxChecked(false);\n        }\n      } else if (input === \"lg\") {\n        setNumOfLargeItems(val);\n        if (largeBoxChecked === false) {\n          setLargeBoxChecked(true);\n        }\n        if (val === 0) {\n          setLargeBoxChecked(false);\n        }\n      } else {\n        console.error(\"Invalid input name arg in handleInputChanges function call\");\n      }\n    }\n  };\n  let handleCheckBoxChanges = box => {\n    if (box === \"small\") {\n      setSmallBoxChecked(!smallBoxChecked);\n    } else if (box === \"medium\") {\n      setMediumBoxChecked(!mediumBoxChecked);\n    } else if (box === \"large\") {\n      setLargeBoxChecked(!largeBoxChecked);\n    } else {\n      console.error(\"Invalid input name arg in handleCheckBoxChanges function call\");\n    }\n  };\n\n  // Calculate Total Cost In Real Time\n  let totalCost;\n  (() => {\n    let smPrice = 0,\n      medPrice = 0,\n      lgPrice = 0;\n    if (smallBoxChecked) {\n      smPrice = props.dish.price * numOfSmallItems;\n      totalCost = smPrice;\n    }\n    if (mediumBoxChecked) {\n      medPrice = props.dish.medPrice * numOfMediumItems;\n    }\n    if (largeBoxChecked) {\n      lgPrice = props.dish.lgPrice * numOfLargeItems;\n    }\n    totalCost = smPrice + medPrice + lgPrice;\n    if (props.dish.offer) {\n      let offer = props.dish.offer / 100 * totalCost;\n      totalCost -= offer;\n    }\n  })();\n  return (\n    /*#__PURE__*/\n    // <Form method=\"post\" action=\"\" className=\"main-form\">\n    //     <div className=\"info\">\n    //         <h2>Info</h2>\n    //         <label className=\"name\">\n    //             Name\n    //             <div className=\"input-group\">\n    //                 <input type=\"text\" name=\"f-name\" placeholder=\"First\" style={fNameErr} />\n    //                 <input type=\"text\" name=\"l-name\" placeholder=\"Last\" style={lNameErr}/>\n    //             </div>\n    //             <p className=\"err-msg\">{data && (data.name || data.fName || data.lName)}</p>\n    //         </label>\n    //         <label className=\"address\">\n    //             Address\n    //             <input type=\"text\" name=\"address\" placeholder=\"Address In Details\" style={adrsErr}/>\n    //             <p className=\"err-msg\">{data && data.address}</p>\n    //         </label>\n    //         <label className=\"phone\">\n    //             Phone\n    //             <input type=\"tel\" name=\"phone\" placeholder=\"+2011 4201 4769\" style={phErr}/>\n    //             <p className=\"err-msg\">{data && data.phone}</p>\n    //         </label>\n    //         <label className=\"location\">\n    //             Your Location\n    //             <input type=\"text\" name=\"location\" style={locErr} />\n    //             <p className=\"err-msg\">{data && data.location}</p>\n    //         </label>\n    //     </div>\n    //     <hr/>\n    //     <div className=\"order-details\">\n    //         <h2>Your Order</h2>\n    //         <p className=\"item-name\">Item: <span>{props.dish.name + \" \"  + props.dish.cat}</span></p>\n    //             <p>Size:</p>\n    //         <div className=\"order-size\">\n    //             <label className=\"small\">\n    //                 <input type=\"checkbox\" checked={smallBoxChecked} onChange={() => handleCheckBoxChanges(\"small\")}  name=\"checkbox-small\" value=\"small-size\" style={CheckBoxesErr}/>\n    //                 <span>Small - &pound;{parseFloat(props.dish.price).toFixed(2)}</span>\n    //                 <input type=\"number\" name=\"num-of-small-items\" value={numOfSmallItems} onChange={(e) => handleInputChanges(\"sm\",+e.target.value)} style={CheckBoxesErr}/>\n    //             </label>\n    //             <label className=\"medium\">\n    //                 <input type=\"checkbox\" checked={mediumBoxChecked} onChange={() => handleCheckBoxChanges(\"medium\")}  name=\"checkbox-medium\" value=\"medium\" style={CheckBoxesErr}/>\n    //                 <span>Medium - &pound;{parseFloat(props.dish.medPrice).toFixed(2)}</span>\n    //                 <input type=\"number\" name=\"num-of-medium-items\" value={numOfMediumItems} onChange={(e) => handleInputChanges(\"med\",+e.target.value)} style={CheckBoxesErr}/>\n    //             </label>\n    //             <label className=\"large\">\n    //                 <input type=\"checkbox\" checked={largeBoxChecked} onChange={() => handleCheckBoxChanges(\"large\")}  name=\"checkbox-large\" value=\"large\" style={CheckBoxesErr}/>\n    //                 <span>Large - &pound;{parseFloat(props.dish.lgPrice).toFixed(2)}</span>\n    //                 <input type=\"number\" name=\"num-of-large-items\" value={numOfLargeItems} onChange={(e) => handleInputChanges(\"lg\",+e.target.value)} style={CheckBoxesErr}/>\n    //             </label>\n    //         </div>\n    //         <p className=\"err-msg\">{data && data.checkBox}</p>\n    //     </div>\n    //     <hr/>\n    //     <div className=\"payment\">\n    //         <h2>Payment</h2>\n    //         <p>Offer: <span>{ props.dish.offer ? props.dish.offer + \"%\" : \"No Offer\"}</span></p>\n    //         <p>Total Cost: <span>&pound;{parseFloat(totalCost).toFixed(2)}</span></p>\n    //     </div>\n    //     <button type=\"submit\">Submit</button>\n    // </Form>\n    _jsxDEV(\"div\", {\n      className: \"success-order\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: require(\"../images/delivery-boy\"),\n        alt: \"delivery\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Your Orde\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }, this)\n  );\n};\n_s(FormComponent, \"aIJvlo1F1DCbNgbxyIsqk6cu2YE=\", false, function () {\n  return [useActionData];\n});\n_c = FormComponent;\nexport const formValidation = async _ref => {\n  let {\n    request\n  } = _ref;\n  const data = await request.formData();\n  const submission = {\n    fName: data.get(\"f-name\").replaceAll(\" \", \"\"),\n    lName: data.get(\"l-name\").replaceAll(\" \", \"\"),\n    address: data.get(\"address\").replaceAll(\" \", \"\"),\n    phone: data.get(\"phone\").replaceAll(\" \", \"\"),\n    location: data.get(\"location\").replaceAll(\" \", \"\"),\n    smallBoxChecked: data.get(\"checkbox-small\"),\n    mediumBoxChecked: data.get(\"checkbox-medium\"),\n    largeBoxChecked: data.get(\"checkbox-large\"),\n    numOfSmallItems: data.get(\"num-of-small-items\"),\n    numOfMediumItems: data.get(\"num-of-medium-items\"),\n    numOfLargeItems: data.get(\"num-of-large-items\")\n  };\n\n  // Handle Errors\n  let errors = {};\n\n  // Handle Empty Inputs\n  (() => {\n    if (submission.fName === \"\" && submission.lName === \"\") {\n      errors.name = \"Your Name Is Required !\";\n    } else if (submission.fName === \"\") {\n      errors.fName = \"Your First Name Is Required !\";\n    } else if (submission.lName === \"\") {\n      errors.lName = \"Your Last Name Is Required !\";\n    }\n    if (submission.address === \"\") {\n      errors.address = \"Your Address Is Required !\";\n    }\n    if (submission.phone === \"\") {\n      errors.phone = \"Your Phone Is Required !\";\n    }\n    if (!submission.smallBoxChecked && !submission.mediumBoxChecked && !submission.smallBoxChecked) {\n      errors.checkBox = \"You Must Choose the size of your meal !\";\n    }\n  })();\n\n  // Regular Expressions for checking the inputs\n  const onlyStringReg = /[0-9!.,@#$%^&*(){}[\\]_+=><\\\";:?\\-~/\\\\|]/;\n  const someSpecialCharsReg = /[!@#$%^&*+\\\"?*~]/;\n  const phoneReg = /^(?:(?:\\(?(?:00|\\+)([1-4]\\d\\d|[1-9]\\d?)\\)?)?[\\-\\.\\ \\\\\\/]?)?((?:\\(?\\d{1,}\\)?[\\-\\.\\ \\\\\\/]?){0,})(?:[\\-\\.\\ \\\\\\/]?(?:#|ext\\.?|extension|x)[\\-\\.\\ \\\\\\/]?(\\d+))?$/;\n  const locationUrlReg = /(https?:\\/\\/)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)/;\n\n  // Handle Invalid Inputs\n  (() => {\n    if (submission.fName != \"\" && onlyStringReg.test(submission.fName) && submission.lName != \"\" && onlyStringReg.test(submission.lName)) {\n      errors.name = \"Please Enter valid Names !\";\n    } else if (submission.fName != \"\" && onlyStringReg.test(submission.fName)) {\n      errors.fName = \"Please Enter a valid First Name !\";\n    } else if (submission.lName != \"\" && onlyStringReg.test(submission.lName)) {\n      errors.lName = \"Please Enter a valid Last Name !\";\n    }\n    if (submission.address != \"\" && someSpecialCharsReg.test(submission.address)) {\n      errors.address = \"Please Enter a valid Address !\";\n    }\n    if (submission.phone != \"\" && !phoneReg.test(submission.phone)) {\n      errors.phone = \"Please Enter a valid Phone Number !\";\n    }\n    if (submission.location != \"\" && !locationUrlReg.test(submission.location)) {\n      errors.location = \"Please Enter a valid Location !\";\n    }\n  })();\n  return errors;\n};\nexport default FormComponent;\nvar _c;\n$RefreshReg$(_c, \"FormComponent\");","map":{"version":3,"names":["useRef","useState","Form","useActionData","FormComponent","props","data","fNameErr","lNameErr","adrsErr","phErr","locErr","CheckBoxesErr","name","border","fName","lName","address","phone","location","checkBox","numOfSmallItems","setNumOfSmallItems","numOfMediumItems","setNumOfMediumItems","numOfLargeItems","setNumOfLargeItems","smallBoxChecked","setSmallBoxChecked","mediumBoxChecked","setMediumBoxChecked","largeBoxChecked","setLargeBoxChecked","handleInputChanges","input","val","console","error","handleCheckBoxChanges","box","totalCost","smPrice","medPrice","lgPrice","dish","price","offer","require","formValidation","request","formData","submission","get","replaceAll","errors","onlyStringReg","someSpecialCharsReg","phoneReg","locationUrlReg","test"],"sources":["D:/web/Learn_React/Foodie-Master/src/components/FormComponent.js"],"sourcesContent":["import { useRef, useState } from \"react\";\r\nimport { Form, useActionData } from \"react-router-dom\";\r\n\r\nconst FormComponent = (props) => {\r\n\r\n    // Form Validation Result\r\n    const data = useActionData();\r\n\r\n    let fNameErr, lNameErr, adrsErr, phErr, locErr ,CheckBoxesErr;\r\n    if (data) {\r\n        if (data.name) {\r\n            fNameErr = {\r\n                border: \"1px solid red\"\r\n            }\r\n            lNameErr = {\r\n                border: \"1px solid red\"\r\n            }\r\n        }\r\n        if (data.fName) {\r\n            fNameErr = {\r\n                border: \"1px solid red\"\r\n            }\r\n        }\r\n        if (data.lName) {\r\n            lNameErr = {\r\n                border: \"1px solid red\"\r\n            }\r\n        }\r\n        if (data.address) {\r\n            adrsErr = {\r\n                border: \"1px solid red\",\r\n            };\r\n        }\r\n        if (data.phone) {\r\n            phErr = {\r\n                border: \"1px solid red\",\r\n            };\r\n        }\r\n        if (data.location) {\r\n            locErr = {\r\n                border: \"1px solid red\",\r\n            };\r\n        }\r\n        if (data.checkBox) {\r\n            CheckBoxesErr = {\r\n                border: \"1px solid red\",\r\n            };\r\n        }\r\n    } \r\n\r\n\r\n    // Handle Changes\r\n    // Inputs\r\n    let [numOfSmallItems, setNumOfSmallItems] = useState(1);\r\n    let [numOfMediumItems, setNumOfMediumItems] = useState(0);\r\n    let [numOfLargeItems, setNumOfLargeItems] = useState(0);\r\n    // CheckBoxes\r\n    let [smallBoxChecked, setSmallBoxChecked] = useState(true);\r\n    let [mediumBoxChecked, setMediumBoxChecked] = useState(false);\r\n    let [largeBoxChecked, setLargeBoxChecked] = useState(false);\r\n    \r\n    let handleInputChanges = (input, val) => {\r\n        if (val >= 0) {\r\n            if (input === \"sm\") {\r\n                setNumOfSmallItems(val);\r\n                if (smallBoxChecked === false) {\r\n                    setSmallBoxChecked(true);\r\n                }   \r\n                if (val === 0) {\r\n                    setSmallBoxChecked(false);\r\n                }\r\n            } else if (input === \"med\") {\r\n                setNumOfMediumItems(val);\r\n                if (mediumBoxChecked === false) {\r\n                    setMediumBoxChecked(true);\r\n                }\r\n                if (val === 0) {\r\n                    setMediumBoxChecked(false);\r\n                }\r\n            } else if (input === \"lg\") {\r\n                setNumOfLargeItems(val);\r\n                if (largeBoxChecked === false) {\r\n                    setLargeBoxChecked(true);\r\n                }\r\n                if (val === 0) {\r\n                    setLargeBoxChecked(false);\r\n                }\r\n            } else {\r\n                console.error(\"Invalid input name arg in handleInputChanges function call\");\r\n            }\r\n        }\r\n    }\r\n    let handleCheckBoxChanges = (box) => {\r\n        if (box === \"small\") {\r\n            setSmallBoxChecked(!smallBoxChecked);\r\n        } else if (box === \"medium\") {\r\n            setMediumBoxChecked(!mediumBoxChecked);\r\n        } else if (box === \"large\"){\r\n            setLargeBoxChecked(!largeBoxChecked);\r\n        } else {\r\n            console.error(\"Invalid input name arg in handleCheckBoxChanges function call\");\r\n        }\r\n    }\r\n\r\n    // Calculate Total Cost In Real Time\r\n    let totalCost;\r\n    (\r\n        () => {\r\n            let smPrice = 0, medPrice = 0, lgPrice = 0;\r\n            if (smallBoxChecked) {\r\n                smPrice = props.dish.price * numOfSmallItems; \r\n                totalCost = smPrice;\r\n            }\r\n            if (mediumBoxChecked) {\r\n                medPrice = props.dish.medPrice * numOfMediumItems; \r\n            }\r\n            if (largeBoxChecked) {\r\n                lgPrice = props.dish.lgPrice * numOfLargeItems; \r\n            }\r\n            totalCost = smPrice + medPrice + lgPrice;\r\n            if (props.dish.offer) {\r\n                let offer = (props.dish.offer / 100) * totalCost;\r\n                totalCost -= offer;\r\n            }\r\n        }\r\n    )()\r\n    \r\n    return (\r\n        // <Form method=\"post\" action=\"\" className=\"main-form\">\r\n        //     <div className=\"info\">\r\n        //         <h2>Info</h2>\r\n        //         <label className=\"name\">\r\n        //             Name\r\n        //             <div className=\"input-group\">\r\n        //                 <input type=\"text\" name=\"f-name\" placeholder=\"First\" style={fNameErr} />\r\n        //                 <input type=\"text\" name=\"l-name\" placeholder=\"Last\" style={lNameErr}/>\r\n        //             </div>\r\n        //             <p className=\"err-msg\">{data && (data.name || data.fName || data.lName)}</p>\r\n        //         </label>\r\n        //         <label className=\"address\">\r\n        //             Address\r\n        //             <input type=\"text\" name=\"address\" placeholder=\"Address In Details\" style={adrsErr}/>\r\n        //             <p className=\"err-msg\">{data && data.address}</p>\r\n        //         </label>\r\n        //         <label className=\"phone\">\r\n        //             Phone\r\n        //             <input type=\"tel\" name=\"phone\" placeholder=\"+2011 4201 4769\" style={phErr}/>\r\n        //             <p className=\"err-msg\">{data && data.phone}</p>\r\n        //         </label>\r\n        //         <label className=\"location\">\r\n        //             Your Location\r\n        //             <input type=\"text\" name=\"location\" style={locErr} />\r\n        //             <p className=\"err-msg\">{data && data.location}</p>\r\n        //         </label>\r\n        //     </div>\r\n        //     <hr/>\r\n        //     <div className=\"order-details\">\r\n        //         <h2>Your Order</h2>\r\n        //         <p className=\"item-name\">Item: <span>{props.dish.name + \" \"  + props.dish.cat}</span></p>\r\n        //             <p>Size:</p>\r\n        //         <div className=\"order-size\">\r\n        //             <label className=\"small\">\r\n        //                 <input type=\"checkbox\" checked={smallBoxChecked} onChange={() => handleCheckBoxChanges(\"small\")}  name=\"checkbox-small\" value=\"small-size\" style={CheckBoxesErr}/>\r\n        //                 <span>Small - &pound;{parseFloat(props.dish.price).toFixed(2)}</span>\r\n        //                 <input type=\"number\" name=\"num-of-small-items\" value={numOfSmallItems} onChange={(e) => handleInputChanges(\"sm\",+e.target.value)} style={CheckBoxesErr}/>\r\n        //             </label>\r\n        //             <label className=\"medium\">\r\n        //                 <input type=\"checkbox\" checked={mediumBoxChecked} onChange={() => handleCheckBoxChanges(\"medium\")}  name=\"checkbox-medium\" value=\"medium\" style={CheckBoxesErr}/>\r\n        //                 <span>Medium - &pound;{parseFloat(props.dish.medPrice).toFixed(2)}</span>\r\n        //                 <input type=\"number\" name=\"num-of-medium-items\" value={numOfMediumItems} onChange={(e) => handleInputChanges(\"med\",+e.target.value)} style={CheckBoxesErr}/>\r\n        //             </label>\r\n        //             <label className=\"large\">\r\n        //                 <input type=\"checkbox\" checked={largeBoxChecked} onChange={() => handleCheckBoxChanges(\"large\")}  name=\"checkbox-large\" value=\"large\" style={CheckBoxesErr}/>\r\n        //                 <span>Large - &pound;{parseFloat(props.dish.lgPrice).toFixed(2)}</span>\r\n        //                 <input type=\"number\" name=\"num-of-large-items\" value={numOfLargeItems} onChange={(e) => handleInputChanges(\"lg\",+e.target.value)} style={CheckBoxesErr}/>\r\n        //             </label>\r\n        //         </div>\r\n        //         <p className=\"err-msg\">{data && data.checkBox}</p>\r\n        //     </div>\r\n        //     <hr/>\r\n        //     <div className=\"payment\">\r\n        //         <h2>Payment</h2>\r\n        //         <p>Offer: <span>{ props.dish.offer ? props.dish.offer + \"%\" : \"No Offer\"}</span></p>\r\n        //         <p>Total Cost: <span>&pound;{parseFloat(totalCost).toFixed(2)}</span></p>\r\n        //     </div>\r\n        //     <button type=\"submit\">Submit</button>\r\n        // </Form>\r\n\r\n        <div className=\"success-order\">\r\n            <img src={require(\"../images/delivery-boy\")} alt=\"delivery\" />\r\n            <h3>Your Orde</h3>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const formValidation = async({request}) => {\r\n    const data = await request.formData();\r\n\r\n    const submission = {\r\n        fName: data.get(\"f-name\").replaceAll(\" \", \"\"),\r\n        lName: data.get(\"l-name\").replaceAll(\" \", \"\"),\r\n        address: data.get(\"address\").replaceAll(\" \", \"\"),\r\n        phone: data.get(\"phone\").replaceAll(\" \", \"\"),\r\n        location: data.get(\"location\").replaceAll(\" \", \"\"),\r\n        smallBoxChecked: data.get(\"checkbox-small\"),\r\n        mediumBoxChecked: data.get(\"checkbox-medium\"),\r\n        largeBoxChecked: data.get(\"checkbox-large\"),\r\n        numOfSmallItems: data.get(\"num-of-small-items\"),\r\n        numOfMediumItems: data.get(\"num-of-medium-items\"),\r\n        numOfLargeItems: data.get(\"num-of-large-items\"),\r\n    }\r\n\r\n    // Handle Errors\r\n    let errors = {};\r\n    \r\n    // Handle Empty Inputs\r\n    (\r\n        () => {\r\n            if (submission.fName === \"\" && submission.lName === \"\") {\r\n                errors.name = \"Your Name Is Required !\";\r\n            } else if (submission.fName === \"\" ) {\r\n                errors.fName = \"Your First Name Is Required !\";\r\n            } else if (submission.lName === \"\") {\r\n                errors.lName = \"Your Last Name Is Required !\";\r\n            }\r\n            if (submission.address === \"\") {\r\n                errors.address = \"Your Address Is Required !\";\r\n            }\r\n            if (submission.phone === \"\") {\r\n                errors.phone = \"Your Phone Is Required !\";\r\n            }\r\n            if (!submission.smallBoxChecked && !submission.mediumBoxChecked && !submission.smallBoxChecked) {\r\n                errors.checkBox = \"You Must Choose the size of your meal !\";\r\n            }\r\n        }\r\n    )()\r\n\r\n    // Regular Expressions for checking the inputs\r\n    const onlyStringReg = /[0-9!.,@#$%^&*(){}[\\]_+=><\\\";:?\\-~/\\\\|]/;\r\n    const someSpecialCharsReg = /[!@#$%^&*+\\\"?*~]/;\r\n    const phoneReg =\r\n        /^(?:(?:\\(?(?:00|\\+)([1-4]\\d\\d|[1-9]\\d?)\\)?)?[\\-\\.\\ \\\\\\/]?)?((?:\\(?\\d{1,}\\)?[\\-\\.\\ \\\\\\/]?){0,})(?:[\\-\\.\\ \\\\\\/]?(?:#|ext\\.?|extension|x)[\\-\\.\\ \\\\\\/]?(\\d+))?$/;\r\n    const locationUrlReg = /(https?:\\/\\/)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)/;\r\n\r\n    // Handle Invalid Inputs\r\n    (\r\n        () => {\r\n            if (\r\n                (submission.fName != \"\" &&\r\n                onlyStringReg.test(submission.fName)) &&\r\n                (submission.lName != \"\" &&\r\n                onlyStringReg.test(submission.lName))\r\n            ) {\r\n                errors.name = \"Please Enter valid Names !\"\r\n            } else if (submission.fName != \"\" && onlyStringReg.test(submission.fName)) {\r\n                errors.fName = \"Please Enter a valid First Name !\"\r\n            } else if (submission.lName != \"\" && onlyStringReg.test(submission.lName)) {\r\n                errors.lName = \"Please Enter a valid Last Name !\"\r\n            }\r\n            if (submission.address != \"\" && someSpecialCharsReg.test(submission.address)) {\r\n                errors.address = \"Please Enter a valid Address !\"\r\n            }\r\n            if (submission.phone != \"\" && !phoneReg.test(submission.phone)) {\r\n                errors.phone = \"Please Enter a valid Phone Number !\"\r\n            }\r\n            if (submission.location != \"\" && !locationUrlReg.test(submission.location)) {\r\n                errors.location = \"Please Enter a valid Location !\"\r\n            }\r\n        }\r\n    )()\r\n\r\n    return errors;\r\n}\r\n\r\n\r\nexport default FormComponent;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}